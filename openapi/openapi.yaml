openapi: 3.0.0
info:
  title: EmotionSNS API
  version: 1.0.0

servers:
  - url: https://api.emotionsns.example.com

paths:
  /posts:
    post:
      summary: Create a new post with emotion analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              example:
                postId: "abc123"
                status: "created"
        "400":
          description: Invalid request
          content:
            application/json:
              example:
                error: "Missing userId or content"

  /posts/{postId}:
    get:
      summary: Get post details with emotion tag
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post details returned
          content:
            application/json:
              example:
                postId: "abc123"
                userId: "user123"
                content: "今日の気分は晴れですぴょん"
                emotionTags:
                  - type: "joy"
                    score: 0.95
                  - type: "surprise"
                    score: 0.75
                reactionCounts:
                  like: 5
                  love: 3
                  cry: 1
        "404":
          description: Post not found
          content:
            application/json:
              example:
                error: "Post not found"

  /posts/{postId}/reactions:
    post:
      summary: React to a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                type:
                  type: string
                  enum: [like, love, cry, angry, wow]
      responses:
        "201":
          description: Reaction added
          content:
            application/json:
              example:
                status: "reaction added"
        "400":
          description: Invalid input
          content:
            application/json:
              example:
                error: "Invalid reaction type"

  /posts/{postId}/replies:
    post:
      summary: Reply to a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Reply created
          content:
            application/json:
              example:
                replyId: "r123"
                status: "reply created"
    get:
      summary: Get list of replies to a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of replies
          content:
            application/json:
              example:
                replies:
                  - replyId: "r1"
                    userId: "user1"
                    content: "わかります！"
                  - replyId: "r2"
                    userId: "user2"
                    content: "それな～"

  /emotion-tags:
    get:
      summary: Get all current emotion tags registered in the system
      responses:
        "200":
          description: All emotion tags returned
          content:
            application/json:
              example:
                emotionTags:
                  - type: joy
                  - type: sadness
                  - type: anger
                  - type: surprise

  /users/{userId}/feed:
    get:
      summary: Get user's post feed, optionally filtered by emotion
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: emotion
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of feed posts
          content:
            application/json:
              example:
                posts:
                  - postId: "abc123"
                    userId: "userX"
                    content: "今日は最高！"
                    emotionTags:
                      - type: "joy"
                        score: 0.9
